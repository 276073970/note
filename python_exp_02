21. 命名规则
(1) 模块名：modoule_name（“类”型则名词优先，“方法”型则动词优先）
(2) 类名：ClassName（名词组合）
(3) 函数、方法名：method_name（动词组合）
(4) 变量、属性名：argument_name（名词组合）
注：
(1) 当变量、属性有刻意表示“数量”的概念时，可考虑使用单复数的形式命名，如imgs和img
(2) 在定义类、函数等的时候，属性、变量、参数等名称的命名，应尽量采用通用性表示，且类、函数等的功能也应按照通用性设计，如：
    # 较好的函数形参定义（更具通用性）
    def read_img(img_read_path, *suffix):
    # 较差的函数形参定义（通用性较差，尽管参数对于特定模块更具针对性）
    def read_img(user_src_img_path, *suffix):
(3) 在具体模块中调用时，再传入专用命名的参数，如：
    # 在调用该函数时再传入具体命名的参数
    read_img(user_src_img_path, 'jpg')

22. 函数传入多个参数时
(1) 先定义list或tuple，再传入函数：
def calc(numbers):
    pass
list = [a, b, c]
calc(list)
(2) 将函数参数定义成可变参数：
# 在函数内部，参数numbers接收到的是一个tuple
def calc(*numbers):
    pass
calc(a, b, c)
(3) 将函数参数定义成可变参数，并传入list或tuple：
def calc(*numbers):
    pass
list = [a, b, c]
calc(list[0], list[1], list[2])
(4) 将函数参数定义成可变参数，并传入list或tuple：
def calc(*numbers):
    pass
list = [a, b, c]
calc(*list)

23. 格式化输出
(1) Python的动态变量虽然可以赋值任意数据类型的值，但在print格式化输出时，要注意使用强制类型转换。如：
    print("number_0 is %d, number_1 is %d" % (int(num_0), int(num_1)))
(2) %运算符就是用来格式化字符串的。
(3) 在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。
(4) 如果参数表只有一个%?，括号可以省略。

24. 搜索路径
当你导入一个模块，Python 解析器对模块位置的搜索顺序是：
(1) 当前目录
(2) 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
(3) 如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。
模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。

25. PYTHONPATH 变量
作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH 的一样。
(1) 在 Windows 系统，典型的 PYTHONPATH 如下：
    set PYTHONPATH=c:\python27\lib;
(2) 在 UNIX 系统，典型的 PYTHONPATH 如下：
    set PYTHONPATH=/usr/local/lib/python

26. 命名空间和作用域
(1) 变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。
(2) 一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。
(3) 每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。
(4) Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
    因此，如果要给函数内的全局变量赋值，必须使用 global 语句。
(5) global VarName 的表达式会告诉 Python， VarName 是一个全局变量，这样 Python 就不会在局部命名空间里寻找这个变量了。

27. globals() 和 locals() 函数
(1) 根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。
(2) 如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。
(3) 如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。
(4) 两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取。

28. Python中的包
(1) 包是一个分层次的文件目录结构，它定义了一个由模块、子包、子包下的子包等组成的 Python 的应用环境。
(2) 简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。__int__.py用于标识当前文件夹是一个包。
(3) 考虑一个在 package_runoob 目录下的 runoob1.py、runoob2.py、__init__.py 文件，test.py 为测试调用包的代码，目录结构如下：

test.py
package_runoob
|-- __init__.py
|-- runoob1.py
|-- runoob2.py
