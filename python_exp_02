21. 命名规则
(1) 模块名：modoule_name（“类”型则名词优先，“方法”型则动词优先）
(2) 类名：ClassName（名词组合）
(3) 函数、方法名：method_name（动词组合）
(4) 变量、属性名：argument_name（名词组合）
注：
(1) 当变量、属性有刻意表示“数量”的概念时，可考虑使用单复数的形式命名，如imgs和img
(2) 在定义类、函数等的时候，属性、变量、参数等名称的命名，应尽量采用通用性表示，且类、函数等的功能也应按照通用性设计，如：
    # 较好的函数形参定义（更具通用性）
    def read_img(img_read_path, *suffix):
    # 较差的函数形参定义（通用性较差，尽管参数对于特定模块更具针对性）
    def read_img(user_src_img_path, *suffix):
(3) 在具体模块中调用时，再传入专用命名的参数，如：
    # 在调用该函数时再传入具体命名的参数
    read_img(user_src_img_path, 'jpg')

22. 函数传入多个参数时
(1) 先定义list或tuple，再传入函数：
def calc(numbers):
    pass
list = [a, b, c]
calc(list)
(2) 将函数参数定义成可变参数：
# 在函数内部，参数numbers接收到的是一个tuple
def calc(*numbers):
    pass
calc(a, b, c)
(3) 将函数参数定义成可变参数，并传入list或tuple：
def calc(*numbers):
    pass
list = [a, b, c]
calc(list[0], list[1], list[2])
(4) 将函数参数定义成可变参数，并传入list或tuple：
def calc(*numbers):
    pass
list = [a, b, c]
calc(*list)

23. 
