21. 命名规则
(1) 模块名：modoule_name（“类”型则名词优先，“方法”型则动词优先）
(2) 类名：ClassName（名词组合）
(3) 函数、方法名：method_name（动词组合）
(4) 变量、属性名：argument_name（名词组合）
注：
(1) 当变量、属性有刻意表示“数量”的概念时，可考虑使用单复数的形式命名，如imgs和img
(2) 在定义类、函数等的时候，属性、变量、参数等名称的命名，应尽量采用通用性表示，且类、函数等的功能也应按照通用性设计，如：
    # 较好的函数形参定义（更具通用性）
    def read_img(img_read_path, *suffix):
    # 较差的函数形参定义（通用性较差，尽管参数对于特定模块更具针对性）
    def read_img(user_src_img_path, *suffix):
(3) 在具体模块中调用时，再传入专用命名的参数，如：
    # 在调用该函数时再传入具体命名的参数
    read_img(user_src_img_path, 'jpg')


22. 函数传入多个参数时
(1) 先定义list或tuple，再传入函数：
def calc(numbers):
    pass
list = [a, b, c]
calc(list)
(2) 将函数参数定义成可变参数：
# 在函数内部，参数numbers接收到的是一个tuple
def calc(*numbers):
    pass
calc(a, b, c)
(3) 将函数参数定义成可变参数，并传入list或tuple：
def calc(*numbers):
    pass
list = [a, b, c]
calc(list[0], list[1], list[2])
(4) 将函数参数定义成可变参数，并传入list或tuple：
def calc(*numbers):
    pass
list = [a, b, c]
calc(*list)


23. 格式化输出
(1) Python的动态变量虽然可以赋值任意数据类型的值，但在print格式化输出时，要注意使用强制类型转换。如：
    print("number_0 is %d, number_1 is %d" % (int(num_0), int(num_1)))
(2) %运算符就是用来格式化字符串的。
(3) 在字符串内部，%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，顺序要对应好。
(4) 如果参数表只有一个%?，括号可以省略。

24. 搜索路径
当你导入一个模块，Python 解析器对模块位置的搜索顺序是：
(1) 当前目录
(2) 如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
(3) 如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/。
模块搜索路径存储在 system 模块的 sys.path 变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。


25. PYTHONPATH 变量
作为环境变量，PYTHONPATH 由装在一个列表里的许多目录组成。PYTHONPATH 的语法和 shell 变量 PATH 的一样。
(1) 在 Windows 系统，典型的 PYTHONPATH 如下：
    set PYTHONPATH=c:\python27\lib;
(2) 在 UNIX 系统，典型的 PYTHONPATH 如下：
    set PYTHONPATH=/usr/local/lib/python


26. 命名空间和作用域
(1) 变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。
(2) 一个 Python 表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。
(3) 每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。
(4) Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
    因此，如果要给函数内的全局变量赋值，必须使用 global 语句。
(5) global VarName 的表达式会告诉 Python， VarName 是一个全局变量，这样 Python 就不会在局部命名空间里寻找这个变量了。


27. globals() 和 locals() 函数
(1) 根据调用地方的不同，globals() 和 locals() 函数可被用来返回全局和局部命名空间里的名字。
(2) 如果在函数内部调用 locals()，返回的是所有能在该函数里访问的命名。
(3) 如果在函数内部调用 globals()，返回的是所有在该函数里能访问的全局名字。
(4) 两个函数的返回类型都是字典。所以名字们能用 keys() 函数摘取。


28. Python中的包
(1) 包是一个分层次的文件目录结构，它定义了一个由模块、子包、子包下的子包等组成的 Python 的应用环境。
(2) 简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。__int__.py用于标识当前文件夹是一个包。
(3) 考虑一个在 package_runoob 目录下的 runoob1.py、runoob2.py、__init__.py 文件，test.py 为测试调用包的代码，目录结构如下：
    test.py
    package_runoob
    |-- __init__.py
    |-- runoob1.py
    |-- runoob2.py
(4) 调用test.py()源码如下：
    #!/usr/bin/python
    # -*- coding: UTF-8 -*-

    # 导入 Phone 包
    from package_runoob.runoob1 import runoob1
    from package_runoob.runoob2 import runoob2

    runoob1()
    runoob2()
(5) 注意错误的引入方式
    from pkg1.pkg2 import Class  # 正确引入
    from pkg1.pkg2.Class import method  # 错误引入
    from pkg1.pkg2 import method  # 正确引入


29. 多行字符串拼接使用小括号
python遇到未闭合的小括号，自动将多行拼接为一行，相比三个引号和换行符，这种方式不会把换行符、前导空格当作字符。
# 源码
s = ('a'
     'b'
     'c')
print(s, type(s))
# 输出
abc <type 'str'>
！注意：该格式定义的多行字符串，输出是各行之间无间隔，如“abc”之间无间隔，
！所以若该多行字符串合并后是一条SQL语句的话，需格外注意，在各行字符串后加一个空格，其合并后才能使一条正确的SQL语句！

注：
(1) 单行注释：#
(2) 多行注释：三个单引号（或三个双引号）
(3) 三个单引号（或三个双引号）也可以表示跨行字符串
(4) 跨行字符串可以用来进行格式化输出，如：
print('''Personnal information of %s:
name:%s
sex:%s
age:%s
job:%s''' % (name,sex,age,job))


30. sys.path & os.path
1) sys.path: 动态地改变Python搜索路径
(1) 如果python中导入的package或module不在环境变量PATH中，那么可以使用sys.path将要导入的package或module加入到PATH环境变量中。
    import sys
    sys.path.append('引用模块的地址')
    如：sys.path.append('C:\\Users\\CH\\bishe\\faceRecognition')，或：
    import sys
    sys.path.insert(0, '引用模块的地址')
    如：sys.path.insert(0, 'C:\\Users\\CH\\bishe\\faceRecognition')
(2) sys.path是个列表，所以在末尾添加目录是很容易的，用sys.path.append就行了。
    当这个append执行完之后，新目录即时起效，以后的每次import操作都可能会检查这个目录。
    如同解决方案所示，可以选择用sys.path.insert(0,…)这样新添加的目录会优先于sys.path中的其他目录被import检查。
(3) 即使sys.path中存在重复，或者一个不存在的目录被不小心添加进来，也没什么大不了，Python的import语句非常聪明，它会自己应付这类问题。
    但是，如果每次import时都发生这种错误（比如，重复的不成功搜索，操作系统提示的需要进一步处理的错误），我们会被迫付出一点小小的性能代价。
(4) 程序向sys.path添加的目录只会在此程序的生命周期之内有效，其他所有的对sys.path的动态操作也是如此。
2) python中获取当前工作目录
    import os  
    curDir = os.getcwd()  
   备注：os.getcwd()返回的是执行命令时所在的目录，而不是脚本本身所在的目录
3) os.path模块
    os.path.abspath(path)  #返回绝对路径  
    os.path.split(path     #将path分割成目录和文件名二元组返回  
    os.path.dirname(path)  #返回path的目录。其实就是os.path.split(path)的第一个元素  
    os.path.basename(path) #返回path最后的文件名  
    os.path.exists(path)   #如果path存在，返回True；如果path不存在，返回False  
    os.path.isabs(path)    #如果path是绝对路径，返回True  
    os.path.isfile(path)   #如果path是一个存在的文件，返回True。否则返回False  
    os.path.isdir(path)    #如果path是一个存在的目录，则返回True。否则返回False  
    os.path.getatime(path) #返回path所指向的文件或者目录的最后存取时间  
    os.path.getmtime(path) #返回path所指向的文件或者目录的最后修改时间   
    s.path.join(path1[, path2[, ...]])  #将多个路径组合后返回，第一个绝对路径之前的参数将被忽略。  
    >>> os.path.join('c:\\', 'csv', 'test.csv')  
    'c:\\csv\\test.csv'  
    >>> os.path.join('windows\temp', 'c:\\', 'csv', 'test.csv')  
    'c:\\csv\\test.csv'  
    >>> os.path.join('/home/aa','/home/aa/bb','/home/aa/bb/c')  
    '/home/aa/bb/c'  
4) 在当前python中引用上层目录的模块或包
(1) 引用上层目录的模块
    通过os.path.append('路径')的方式，将python的环境变量切换到项目根目录，必须使用绝对路径
(2) 引用上层目录的包
    通过os.path.append('路径')的方式，将python的环境变量切换到项目根目录，必须使用绝对路径
    在上层目录中创建一个空文件__init__.py，这样python就识别这个上层目录是一个包，不然就仅仅为目录
5) 在使用sys.path.append('引用模块的地址')或sys.path.insert(0, '引用模块的地址')向PATH环境变量添加自己的目录路径时，
   要特别注意添加的次序（即Python语句的先后次序），因为每次import操作都会检查sys.path这个列表，
   并按列表中各条路径的先后次序，逐个从中搜寻所需的包或模块，如：
    sys.path.append('C:\\Users\\CH\\bishe\\faceRecognition\\face_recognition') ··········【路径一】
    from camera_reader import CameraReader
    sys.path.append('C:\\Users\\CH\\bishe\\faceRecognition\\model_training') ············【路径二】
    from train_model import Model
    from data_set import DataSet
   如果此时【路径一】中包含了【路径二】中的模块，则当执行“from train_model import Model”等语句时，系统会先从【路径一】中搜寻“train_model”模块，
   在这种情况下，如果后续代码中使用了“Model”或“DataSet”类及其方法，看似引用的是【路径二】下的“train_model”或“data_set”模块下的类及方法，
   实则是【路径一】下的“train_model”或“data_set”模块下的类及方法，进而产生了一个极其不容易排出的bug，即：
   无论对【路径二】下的各模块、类、方法做怎样的修改，程序代码的运行效果都不变，
   甚至将【路径二】下的模块都删除，代码中依然可以使用“Model”或“DataSet”类及其方法，程序仍然可运行，恐怖之极...
   
   
   
