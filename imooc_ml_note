0. 机器学习 & 深度学习
1）机器学习 = 训练样本 + 标定特征 + 分类器
2）深度学习 = 海量训练样本 + 人工神经网络
3）Haar特征：人脸检测
（1）BASIC
（2）CORE
（3）ALL(Titled)
4）Hog特征：物体检测
5）Adaboost分类器
（1）强分类器
（2）弱分类器
（3）特征Node
6）SVM支持向量机
7）机器学习流程：样本 => 特征 => 分类器 => 检验
（1）通过视频获得样本数据（视频帧）
8）视频通常是将帧图像压缩编码，并非逐帧存储，因此：
（1）视频分解图片，需要解码器
（2）图片合成视频，需要编码器

1. 视频分解照片
# 处理流程：
# 加载视频load => 获取信息info => 视频解码parse（单帧获取） => 展示（imshow）/保存（imwrite）
import cv2
#
cap = cv2.VideoCapture("1.mp4")  # 获取视频句柄 cap
isOpened = cap.isOpened  # 判断当前文件是否打开
print(isOpened)
# 人眼最低帧分辨率：15 fps
fps = cap.get(cv2.CAP_PROP_FPS)  # 当前视频帧率值（frames per second）
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))  # 每帧图像宽度
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))  # 每帧图像高度
print(fps,width,height)
#
i = 0  # 记录当前保存的图像数
while(isOpened):
    if i == 10:  # 人工设定最多保存10张图像
        break
    else:
        # 逐帧读取，cap.read()函数参数：读取成功标志位flag、图像帧内容frame 
        (flag,frame) = cap.read()
        if flag == True:
            i = i + 1
            fileName = 'image' + str(i) + '.jpg'  # 生成文件名
            print(fileName)
            # 保存图像帧，cv2.imwrite()参数：文件名、图像帧内容、格式及质量等级
            cv2.imwrite(fileName,frame,[cv2.IMWRITE_JPEG_QUALITY,100])
print('end!')

2. 图片合成视频
import cv2
img = cv2.imread('image1.jpg')
imgInfo = img.shape
size = (imgInfo[1],imgInfo[0])
print(size)
#
# 写入对象的创建 videoWrite
# 视频写入方法，cv2.VideoWriter()函数参数：file_name、编码器、帧率、帧尺寸size
videoWrite = cv2.VideoWriter('2.mp4', -1, 5, size)
#
for i in range(1,10):
    fileName = 'image' + str(i) + '.jpg'
    img = cv2.imread(fileName)
    # 写入方法write(img_data)
    videoWrite.write(img)
print('end!')

3. Haar特征

# 1）什么是Haar特征？
# （1）特征：（某区域）像素的运算结果（具体值、向量、矩阵、多维）
# （2）理解：图片像素中隐藏了“特征”信息，需通过一定的运算手段得以“体现”
# （3）Haar特征：Haar模板（haar_size）与图片像素的运算结果（遍历）
# （4）Haar模板：BASIC（5种）、CORE（3种）、ALL（Titled，7种），共15种

# 2）如何利用特征（区分目标）？
# （1）阈值判决：特征 >< 阈值（T）  =>  Obj = True/False
# （2）公式判决：依据一定的判决公式，较复杂

# 3）如何得到判决？
# （1）机器学习：通过机器学习得到判决门限（阈值），再结合计算的特征实现阈值判决

# 4）计算原理
# 公式推导：
# 取整个区域权重为1，黑色区域权重为-2
# 特征 = 整个区域*权重1 + 黑色*权重2
#      = (黑+白)*1 + 黑*(-2)
#      = 黑 + 白 - 2黑
#      = 白 - 黑

# 5）遍历过程
# 1 haar模版遍历：上下、左右，image_size、模版_size
# 如：图片100*100，模板10*10，step = 10，则需100次
# 注意当前条件：100*100、10*10、step=10、模版1
# 模版变动：滑动、缩放（共20级，10*10、11*11、…… ）
# 举例：1080*720图片，step=2，模板初始大小10*10 
# 计算量 = 15种模版 * 20级缩放 *（1080/2*720/2）*（100点+/- ）
#        = 50——100亿次 运算量
# FPS >= 15，则（50-100）* 15 = 1000亿次

# 6）积分图
# A区域：1 
# B区域：1 + 2
# C区域：1 + 3 
# D区域：1 + 2 + 3 + 4
# 4 = D - B - C + A
#   = A - B - C + D  (压缩至3次+/-运算)
# 注意：计算前需先将图片上所有像素遍历一次
# 特征 = (p1 - p2 - p3 + p4) * w

4. Adaboots分类器

# 1）haar + adaboost 常用于人脸识别

# 2）Adaboots分类器优点：
# （1）前一个基本分类器分出的样本，在下一个分类器中会得到加强
# （2）自适应过程并循环迭代

# 3）训练终止条件：
# （1）循环迭代的最大次数for_count
# （2）当检测结果 > 最小检测概率p

# 4）Adaboots分类器有三层结构：强分类器、弱分类器、特征节点

# 5）强分类器
# （1）多级级联的判决条件
#      haar>T1 and haar>T2  # 2个强分类器级联（通常为15—20个级联）
#      即：如果某haar特征能连续通过20个强分类器的阈值判断，才认为是目标
# （2）每一个强分类器有自己独立的特征，并对其进行阈值判决
# （3）例如：3个强分类器特征分别为：x1、x2、x3，阈值分别为t1、t2、t3
#      判决：x1>t1 and x2>t2 and x3>t3 => 全部通过则认为是目标
# （4）每一级分类器的训练，会得到一个阈值
# （5）每个强分类器由若干个弱分类器组成
# （6）每个弱分类器又可分解成若干个特征节点（Node）

# 6）弱分类器
# （1）强分类器实现目标判决：特征 & 阈值
# （2）弱分类器计算强分类器特征
# （3）假设某强分类器特征为x1，其各弱分类器特征分别为y1、y2、y3
#      则 x1 = sum(y1, y2, y3)
# （4）弱分类器特征由若干特征节点Node组成
# （5）OpenCV中一个弱分类器最多支持3个Haar特征，各对应一个Node

# 7）特征节点Node
# （1）每个Node对应一个Haar特征，即Node_01（阈值T1） => Haar_01
# （2）当Haar_01 > T1，该Node节点特征为z1 = a1
#      当Haar_01 < T1，该Node节点特征为z1 = a2
# （3）同理可得z2、z3
# （4）Z = sum(z1, z2, z3) > T_弱分类器01，则y1 = AA
#      Z = sum(z1, z2, z3) < T_弱分类器01，则y1 = BB

# 8）adaboost 计算过程
# （1）Node_123：Haar_123 >< Node_T123  =>  z123 = a12
# （2）弱分类器1：Z1 = sum(z1, z2, z3) >< 弱分类器1_T1  =>  y1 = AA/BB
# （3）强分类器1：Y1 = sum(y1, y2, y3) >< 强分类器1_T1  =>  x1 = True
# （4）特征判决：x1 = True & x2 = True & x3 = True  =>  Obj = True

# 9）Adaboost分类器的训练
# （1）权值分布初始化（通过初始化计算公式，所有特征权值相等）
# （2）遍历判决阈值，会计算出一系列误差概率P，其中min(P) => 权值t
# （3）权重系数 G1(x)（G2(x)、G3(x)、……）
# （4）更新权重分布 update
# （5）训练终止条件：训练次数for_count、误差概率P，否则转至（2）步

5. 基于Haar+Adaboost人脸识别

# load xml => load jpg => gray => Haar => detect（检测） => draw（识别并绘制）

import cv2
import numpy as np

# 加载xml分类器文件，cv2.CascadeClassifier()函数参数：file_name
# 已训练好的人脸识别Adaboos分类器：thaarcascade_frontalface_default.xml
# 已训练好的眼睛识别Adaboos分类器：haarcascade_eye.xml
face_xml = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
eye_xml = cv2.CascadeClassifier('haarcascade_eye.xml')

# 加载jpg图片文件
img = cv2.imread('face.jpg')
cv2.imshow('src',img)

# 灰度处理
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# 人脸检测，face_xml.detectMultiScale()函数参数：gray、缩放系数scale、人脸最小像素值
# 并返回检测到的各个人脸区域的4元组数据（x, y, width, height）
faces = face_xml.detectMultiScale(gray,1.3,5)
print('face=',len(faces))  # 检测当前图片人脸数

# 人脸识别并绘制方框
for (x,y,w,h) in faces:
    cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
    roi_face = gray[y:y+h,x:x+w]  # 人脸区域范围（灰度）
    roi_color = img[y:y+h,x:x+w]  # 人脸区域范围（彩色）
    # 眼睛识别，eye_xml.detectMultiScale()函数参数：人脸区域范围（其他参数默认）
    eyes = eye_xml.detectMultiScale(roi_face)
    print('eye=',len(eyes))  # 检测当前人脸眼睛数
    '''
    for (e_x,e_y,e_w,e_h) in eyes:
        cv2.rectangle(roi_color, (e_x,e_y), (e_x+e_w,e_y+e_h), (0,255,0), 2)
    '''
cv2.imshow('dst',img)
cv2.waitKey(0)
