VBox搭建本地LAMP开发环境
1) GNU/Linux系的OS十分适合开发工作（尤其Web应用开发与调试），但娱乐性较差（如音、视频等功能）
2) GNU/Linux注定应该应用在服务器端，因而终端的字符界面才是其正宗的使用方式，而不应过分追求其图形化界面（如GNOME、KDE等）
3) 平时难免有娱乐休闲等需求，可选择以图形化界面为主的OS，如Windows、Mac_OS等
4) 综合考虑工作、娱乐两相宜的需求，在主机中通过VBox搭建本地LAMP开发环境，不失为一个可行且高效的解决方案
5) 通过在VBox中配置enp0s3(NAT)、enp0s8(Host-Only)双网卡，可实现:虚拟机可访问外网，且主机可在断网情况下访问虚拟机的Web Server服务
6) 主机要通过虚拟机的Apache Server访问某目录文件，需赋予该目录文件XX1权限，通常为：chmod 755 file_name
7) Linux系统中可更改目录权限的文件系统类型: ext1、2、3、4、xfs等可改, 而NTFS、exFAT等不可改
8) VBox虚拟机中, Linux系统手动挂载共享文件夹(已在VBox管理器界面设置固定分配共享文件夹): 
(1) 挂载命令:
# mkdir /mnt/guest_share
# mount -t vboxsf host_share /mnt/guest_share
(2) 自动挂载:
# vi /etc/rc.local
mount -t vboxsf host_share /mnt/guest_share
(3) 卸载命令:
# umount -f /mnt/guest_share
(4) 编写自启动shell脚本内容:
#!/bin/sh 
sudo mount -t vboxsf host_share /mnt/guest_share
(5) 注意事项:
共享文件夹的名称千万不要和挂载点的名称相同, 否则报错
9) VBox共享文件夹的自动挂载功能, 默认将其挂载到/media/folder_name, 权限750且无法更改


6) 仅主机(Host-Only)网络
这种方式使用VirtualBox虚拟出来的一张网卡（网络连接中就能看到），虚拟机需要配置静态IP才能实现和主机的互相访问，这种方式默认情况是无法访问外网的，
但是可以通过主机的Internet连接共享来实现访问外网
Host-Only方式如何完美实现4通访问：
(1) VirtualBox配置，修改网络配置为：仅主机(Host-Only)网络，选择VirtualBox虚拟出来的网卡
(2) 启动CentOS虚拟机，默认情况下无法上网，无法访问主机
(3) 修改虚拟机网络配置，Linux的网络配置都在/etc/sysconfig/network-scripts这个目录下，cd过去然后使用ls命令查看
(4) ifcfg-xx即为网络配置文件，后面的eth0表示网卡设备名称，每张网卡一个配置文件，使用vi ifcfg-eth0命令修改配置
(5) 增加/修改配置如下：
    IPADDR=192.168.56.2
    NETMASK=255.255.255.0
    GATEWAY=192.168.56.1
    DNS1=192.168.1.1
    BOOTPROTO=static
(6) 说明：
    IPADDR为IP地址，
    NETMASK为子网掩码，
    GATEWAY为网关，
    DNS1为首选DNS，
    BOOTPROTO=static表示使用静态IP
    IP地址的设置要跟VirtualBox虚拟网卡的IP在一个网段，网关设置为虚拟网卡的IP
(7) 设置完之后:wq保存并退出，然后使用service network restart重启网络服务
(8) 此时已经可以ping通主机了
(9) 但是还不能访问外网，此时我们可以使用Internet连接共享来使VirtualBox的虚拟网卡可以访问外网
(10) 此时VirtualBox虚拟网卡的IP会被改变为192.168.137.1，我们手动修改回192.168.56.1
(11) 回到虚拟机，curl www.baidu.com，此时已经可以访问外网



1. 新建虚拟机
1) 注意选择专家模式
2) 注意设置文件位置（虚拟机安装位置）
3) 存储在物理硬盘上的方式：固定大小
4) 备份：系统快照

2. 设置虚拟机双网卡
1) 使虚拟机可访问外网，且主机可在断网情况下访问虚拟机的Web Server服务
2) 便于本地Web应用的开发及调试
3) VBox管理器 => 设置 => 网络 => 网卡1（网络地址转换(NAT)）=> 网卡2（仅主机(Host-Only)网络）
4) 备份：系统快照

3. 安装虚拟机
1) 软件选择：最小安装
2) 安装位置：自动分区（有其他特殊需求可自行规划分区）
3) 网络和主机名：开启enp0s3、enp0s8两块网卡
4) 配置enp0s8网卡：
(1) # vi /etc/sysconfig/network-scripts/
(2) BOOTPROTO=static
    IPADDR=192.168.56.100
    NETMASK=255.255.255.0
    ONBOOT=yes
(3) # systemctl restart network
5) 主机测试：# ping 192.168.56.100
6) 注意：enp0s8的IP需与其主机虚拟网络界面的网关IP在同一网段：
   VBox管理器 => 管理 => 全局设定 => 网络 => 仅主机(Host-Only)网络 => 编辑
7) 关机备份：# shutdown -h now

4. 首次登陆
1) 设置服务器的主机名
(1) # echo $HOSTNAME  //显示当前主机名
    或
    # hostname
(2) # vi /etc/hostname  //编辑新的主机名并保存退出
2) 配置静态 IP 地址(当虚拟机选用桥接模式时)
(1) # ip addr [show]  //显示当前网络配置情况
    或
    # yum install net-tools  //提供 ifconfig 工具
    # ifconfig
(2) # vi /etc/sysconfig/network-scripts/ifcfg-enp0s3
    BOOTPROTO = "static"
    IPADDR = "静态IP"
    NETMASK = "子网掩码"
    GATEWAY = "默认网关"
    DNS1 = "首选DNS"
    DNS2 = "备选DNS"
    ONBOOT = "yes"
(3) # systemctl restart network
    或
    # service network restart
3) # yum -y update && yum -y upgrade  //更新依赖关系并升级
4) 关机备份：# shutdown -h now

5. 安装VBox增强功能 VBoxGuestAdditions.iso => ./VBoxLinuxAdditions.run
1) 安装依赖包
# yum install kernel-headers
# yum install kernel-devel
# yum install make
# yum install gcc* 
# yum install bzip2
2) 安装VBoxGuestAdditions
(1) 先关闭虚拟机：# shutdown -h now
(2) 在VBox管理器中选择挂载镜像：C:\Program Files\Oracle\VirtualBox\VBoxGuestAdditions.iso
(3) 启动虚拟机
(4) 在/media/目录下新建目录cdrom/：# mkdir /media/cdrom/
(5) 挂载虚拟光驱：# mount /dev/cdrom/ /media/cdrom/
(6) 在/media/cdrom/目录下运行安装程序：# ./VBoxLinuxAdditions.run
(7) 设置共享文件夹：虚拟机界面菜单栏 => 设备 => 共享文件夹 => 共享文件夹路径 & 名称 => 固定分配(勿选自动挂载)
(8) 手动挂载共享文件夹
# mkdir /mnt/guest_share  //新建虚拟机共享目录
# mount -t vboxsf host_share /mnt/guest_share  //将主机共享文件夹挂载到虚拟机共享目录
# vi /etc/rc.local  //配置开机自动挂载
mount -t vboxsf host_share /mnt/guest_share
(9) 关机备份：# shutdown -h now

6. 配置 Apache HTTP 服务器（Apache配置文件，默认在 /etc/httpd/conf/httpd.conf）
1) 安装
# yum install -y httpd  //安装
# systemctl start httpd.service  //启动
# systemctl enable httpd.service  //自动启动（添加 Apache 服务到系统层使其随系统自动启动）
# firewall-cmd --add-service=http  //允许 http 服务通过防火墙(永久)
# firewall-cmd --permanent --add-port=80/tcp  //允许 80 号端口通过防火墙(永久)
                                              //若未加参数--permanent，则重启后端口失效
# firewall-cmd --reload  //重新加载防火墙
# systemctl restart httpd.service  //重启 Apache HTTP 服务器，然后新的端口号才能生效
2) 更改默认端口号（80）
(1) 编辑配置文件：# vi /etc/httpd/conf/httpd.conf
(2) 查找：LISTEN 80
(3) 注释本行并复制到下一行：#LISTEN 80
(4) 把端口号 80 改为其它任何端口（例如 3221）
(5) 保存并退出
3) 修改默认根目录（DocumentRoot）
(1) 编辑配置文件：# vi /etc/httpd/conf/httpd.conf
(2) 查找：DocumentRoot "/var/www/html"
(3) 注释本行并复制到下一行：#DocumentRoot "/var/www/html"
(4) 将"/var/www/html"修改为新路径
(5) 保存并退出
4) 设置首页运行的顺序（index.html index.php）
(1) 编辑配置文件：# vi /etc/httpd/conf/httpd.conf
(2) 查找：DirectoryIndex index.html
(3) 注释本行并复制到下一行：#DirectoryIndex index.html
(4) 在index.html后追加其他首页引导文件，并以空格间隔：DirectoryIndex index.html index.php
(5) 保存并退出
(6) 如果上述设置后仍无法按顺序运行首页，那么还需修改php相关的配置文件php.conf（/etc/httpd/conf.d/php.conf），
    并设置DirectoryIndex index.php

7. 配置 MariaDB 数据库
1) 安装
# yum install -y mariadb mariadb-server  //安装
# systemctl start mariadb.service  //启动
# systemctl enable mariadb.service  //自动启动
2) 数据库初始化
# mysql_secure_installation
(1) Enter current password for root (enter for none):  //当前数据库密码为空，直接敲击回车
    root user without the proper authorisation.
(2) Set root password? [Y/n] y  //是否设置root管理员的数据库密码
    New password:  //输入要为root用户设置的数据库密码
    Re-enter new password:  //重复输入一次密码
(3) Remove anonymous users? [Y/n] y  //是否删除匿名帐号
(4) Disallow root login remotely? [Y/n] y  //是否禁止root用户从远程登录
(5) Remove test database and access to it? [Y/n] y  //是否删除test数据库并取消对其的访问权限
(6) Reload privilege tables now? [Y/n] y  //是否刷新授权表，让初始化后的设定立即生效
3) 注意
(1) 很多生产环境中需要使用站库分离的技术，因此如果需要让root管理员帐户能够用远程访问数据库时
(2) 可在刚刚初始化过程中设置允许root管理员帐户从远程访问的策略，然后再设置防火墙允许对本机mysql服务程序的访问请求即可
    # firewall-cmd --permanent --add-service=mysql
    # firewall-cmd --reload
(3) 如果该 MariaDB 只用在本机，则务必不要设置防火墙允许通过，使用 UNIX Socket 连接该数据库
(4) 如果需要在别的服务器上连接数据库，则尽量使用内部网络，而不要将数据库服务暴露在公开的互联网上

8. 安装 PHP
1) 安装
# yum install -y php  //安装
# systemctl restart httpd.service  //重启 Apache 服务以便在 Web 浏览器中渲染 PHP
2) 验证
(1) # echo -e "<?php\nphpinfo();\n?>" > /var/www/html/phpinfo.php  //通过在 Apache 文档根目录下创建下面的 php 脚本验证 PHP
(2) # php /var/www/html/phpinfo.php  //在 Linux 命令行中查看刚才创建的 PHP 文件(phpinfo.php)
或者# links http://127.0.0.1/phpinfo.php
或者http://localhost:80/phpinfo.php

9. 配置git环境（repository）
1) 安装Git服务程序：
# yum install -y git
2) 配置个人信息及默认编辑器
# git config --global user.name "Chen Hao"
# git config --global user.email "276073970@qq.com"
# git config --global core.editor vi
3) 查看刚刚配置的Git工作环境信息
# git config --list
4) git服务器配置SSH密钥
(1) # ssh-keygen  //git客户机生成SSH密钥
(2) 点击进入Github的帐户配置页面[Settings]
(3) 点击左侧[SSH and GPG keys]标签，再点击右侧[New SSH key]添加SSH公钥
(4) 将本机中的ssh公钥(/root/.ssh/id_rsa.pub)复制到页面中
(5) 填写ssh公钥信息[Title]，确认添加密钥[Add SSH key]
5) 本地创建版本库
# mkdir local_repo_name/  //创建本地的工作目录
# cd local_repo_name/  //切换到本地的工作目录
# git init  //本地生成版本库（即目录的初的始化，转换成git的工作目录）
# git add .  //本地追踪文件（git add [.]/[--all]/[-A]）
# git commit -m "first commit"  //本地提交文件
# git remote add origin git@github.com:user_name/repo_name.git  //将本地仓库与远端仓库关联
# git push -u origin master  //第一次向远端库提交
错误提示：fatal: remote origin already exists.
解决办法：$ git remote rm origin
6) 克隆远端版本库
git clone git@github.com:user_name/repo_name.git
