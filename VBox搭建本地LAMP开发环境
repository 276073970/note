1. 新建虚拟机
1）注意选择专家模式
2）注意设置文件位置（虚拟机安装位置）
3）存储在物理硬盘上的方式应选固定大小
4）备份：系统快照

2. 设置虚拟机双网卡
1）可使虚拟机可访问外网，且主机可在断网情况下访问虚拟机的Web Server服务
2）便于本地Web应用的开发及调试
3）VBox管理器 => 设置 => 网络 => 网卡1（网络地址转换(NAT)）=> 网卡2（仅主机(Host-Only)网络）
4）备份：系统快照

3. 安装虚拟机
1）软件选择：最小安装
2）安装位置：自动分区（有其他特殊需求可自行规划分区）
3）网络和主机名：开启enp0s3、enp0s8两块网卡
4）关机备份：# shutdown -h now

4. 首次登陆
1）登陆后首先执行：# yum -y update && yum -y upgrade
2）关机备份：# shutdown -h now

5. 安装VBox增强功能 VBoxGuestAdditions.iso => ./VBoxLinuxAdditions.run
1）安装依赖包
# yum install kernel-headers
# yum install kernel-devel
# yum install make
# yum install gcc* 
# yum install bzip2
2）安装VBoxGuestAdditions
(1)先关闭虚拟机：# shutdown -h now
(2)在VBox管理器中选择挂载镜像：C:\Program Files\Oracle\VirtualBox\VBoxGuestAdditions.iso
(3)启动虚拟机
(4)在/media/目录下新建cdrom/：# mkdir /media/cdrom/
(5)挂载虚拟光驱：# mount /dev/cdrom/ /media/cdrom/
(6)在/media/cdrom/目录下运行安装程序：# ./VBoxLinuxAdditions.run
(7)设置共享文件夹：虚拟机界面菜单栏 => 设备 => 共享文件夹 => 固定分配 => 共享文件夹路径 & 名称 => 自动挂载 & 固定分配
(8)关机备份 & 重启虚拟机

6. 配置 Apache HTTP 服务器（Apache配置文件，默认在 /etc/httpd/conf/httpd.conf）
1）安装
# yum install -y httpd  //安装
# systemctl start httpd.service  //启动
# systemctl enable httpd.service  //自动启动（添加 Apache 服务到系统层使其随系统自动启动）
# firewall-cmd --add-service=http  //允许 http 服务通过防火墙(永久)
# firewall-cmd --permanent --add-port=80/tcp  //允许 80 号端口通过防火墙(永久)
# firewall-cmd --reload  //重新加载防火墙
# systemctl restart httpd.service  //重启 Apache HTTP 服务器，然后新的端口号才能生效
2）更改默认端口号（80）
（1）编辑配置文件：# vi /etc/httpd/conf/httpd.conf
（2）查找：LISTEN 80
（3）注释本行并复制到下一行：#LISTEN 80
（4）把端口号 80 改为其它任何端口（例如 3221）
（5）保存并退出
3）修改默认根目录（DocumentRoot）
（1）编辑配置文件：# vi /etc/httpd/conf/httpd.conf
（2）查找：DocumentRoot "/var/www/html"
（3）注释本行并复制到下一行：#DocumentRoot "/var/www/html"
（4）将"/var/www/html"修改为新路径
（5）保存并退出
4）设置首页运行的顺序（index.html index.php）
（1）编辑配置文件：# vi /etc/httpd/conf/httpd.conf
（2）查找：DirectoryIndex index.html
（3）注释本行并复制到下一行：#DirectoryIndex index.html
（3）在index.html追加其他首页引导文件，并以空格间隔：DirectoryIndex index.html index.php
（4）保存并退出
（5）如果上述设置后仍无法按顺序运行首页，那么还需修改php相关的配置文件php.conf（/etc/httpd/conf.d/php.conf），
     并设置DirectoryIndex index.php

7. 配置 MariaDB 数据库
1）安装
# yum install -y mariadb mariadb-server  //安装
# systemctl start mariadb.service  //启动
# systemctl enable mariadb.service  //自动启动
2）数据库初始化
# mysql_secure_installation
（1）Enter current password for root (enter for none):  //当前数据库密码为空，直接敲击回车
     root user without the proper authorisation.
（2）Set root password? [Y/n] y  //是否设置当前用户数据库密码
     New password:  //输入要为root用户设置的数据库密码
     Re-enter new password:  //重复输入一次密码
（3）Remove anonymous users? [Y/n] y  //是否删除匿名帐号
（4）Disallow root login remotely? [Y/n] y  //是否禁止root用户从远程登录
（5）Remove test database and access to it? [Y/n] y  //是否删除test数据库并取消对其的访问权限
（6）Reload privilege tables now? [Y/n] y  //是否刷新授权表，让初始化后的设定立即生效
3）注意
（1）很多生产环境中需要使用站库分离的技术，因此如果需要让root管理员帐户能够用远程访问数据库时
（2）可在刚刚初始化过程中设置允许root管理员帐户从远程访问的策略，然后再设置防火墙允许对本机mysql服务程序的访问请求即可
     # firewall-cmd --permanent --add-service=mysql
     # firewall-cmd --reload
（3）如果该 MariaDB 只用在本机，则务必不要设置防火墙允许通过，使用 UNIX Socket 连接该数据库
（4）如果需要在别的服务器上连接数据库，则尽量使用内部网络，而不要将数据库服务暴露在公开的互联网上

8. 安装 PHP
1）安装
# yum install -y php  //安装
# systemctl restart httpd.service  //重启 Apache 服务以便在 Web 浏览器中渲染 PHP
2）验证
（1）# echo -e "<?php\nphpinfo();\n?>" > /var/www/html/phpinfo.php  //通过在 Apache 文档根目录下创建下面的 php 脚本验证 PHP
（2）# php /var/www/html/phpinfo.php  //在 Linux 命令行中查看刚才创建的 PHP 文件(phpinfo.php)
或者# links http://127.0.0.1/phpinfo.php
或者http://localhost:80/phpinfo.php

9. 配置git环境（repository）
1) 安装Git服务程序：
# yum install -y git
2) 配置个人信息及默认编辑器
# git config --global user.name "Chen Hao"
# git config --global user.email "276073970@qq.com"
# git config --global core.editor vi
3) 查看刚刚配置的Git工作环境信息
# git config --list
4) 本地创建版本库
# mkdir local_repo_name/  //创建本地的工作目录
# cd local_repo_name/  ////切换到本地的工作目录
# git init  //本地生成版本库（即目录初的始化，转换成git的工作目录）
# git add .  //本地追踪文件（git add --all、git add -A）
# git commit -m "first commit"  //本地提交文件
# git remote add origin git@github.com:user_name/repo_name.git  //将本地仓库与远端仓库关联
# git push -u origin master  //第一次向远端库提交
错误提示：fatal: remote origin already exists.
解决办法：$ git remote rm origin







[root@linuxprobe ~]# ssh-keygen 
