注意事项:
1. 当需调用SQLite3的API时, 需在相应的CGI文件(C语言实现)中引入其头文件sqlite3.h
2. 编译sqlite3数据库C语言程序时出现fatal error: sqlite3.h: No such file or directory，找不到头文件的问题。
3. 原来是系统没有安装函数库。执行下面语句解决：
sudo apt-get install libsqlite3-dev
或 sudo yum install sqlite-devel.x86_64
4. 当用交叉编译器编译的时候，也会出现找不到sqlite3.h头文件的情况，解决方法是把sqlite3.h这个头文件放到交叉编译工具目录的include目录下。
5. 在C源文件(CGI源文件)中引入时应写作: #include "sqlite3.h"(#include <sqlite3.h>会报错)
6. 编译包含sqlite3的C代码时报错: undefined reference to 'sqlite3_open'. 
   这不是sqlite3安装的问题，而是在gcc编译的时候找不到对应的库或者头文件。
   解决办法: gcc test.c -o test.cgi -l sqlite3
            或gcc test.c -l sqlite3 -o test.cgi

1.SQLite管理操作
1.1.进入sqlite3交互模式
解析：
①　sqlite3.exe [dbname]　打开sqlite3的交互模式，[并创建数据库]。
②　.open dbname若未创建数据，可以创建数据库，若己创建则打开。
③　.databases显示当前打开的数据库文件
④　.exit 退出交互模式。
⑤　.help,列出命令的提示信息，可供于查阅。
1.2.创建销毁表
解析：
①　.open mydb 打开要创建表的那个数据库。
②　create  table  <table_name>  (field1  type1, field2  type2,…);　建表语句。
③　.tables 查看当前数据库下所有的表。
④　.schema [tbname] 查看表结构(主要看列信息)。
⑤　drop table <table_name>; 销毁表的语句。
1.3.插入与查询
解析：
①　.tables 插入数据之前先确定，所要插入表的存在。
②　insert  into  <table_name>  values (value1, value2,…);向表中添加新记录
③　select  filed1,field2···  from  <table_name>;查询表中某些字段的记录。
④　select  *  from  <table_name>;查询表中所有字段的记录。
⑤　.header on 显示字段名称。
⑥　.mode column 以列模式显示字段的记录。默认是list模式
1.4.排序
解析：
①　order by field desc|asc 此子句，可以用于表达排序，desc 表示降序，asc表示升序。
1.5.修改与删除记录
解析：
①　update　<table_name>  set  <field1=value1>,<fied2=value2>··where  <expression>;  
　　　　更新表中记录。若没有where子句，则会全部修改。
②　delete  from  <table_name>  where  <expression>;  若没有where子句，则会删全表内容，但不同于drop。

sqlite3_exec()函数的使用
sqlite3数据库是一个小型的关系型的数据库,以文件的方式存在,打开文件即是打开数据库,它小巧且功能强大,在嵌入式领域内使用很广.现在就介绍一下其中一个重要函数的使用:
int sqlite3_exec(sqlite3 *db, const char *sql, sqlite3_callback callback, void *,char **errmsg);
功能:执行sql语句
参数:
db:数据库句柄
sql:sql语句
callback:回调函数,每成功执行一次sql语句就执行一次callback函数
void *:给回调函数传的参数
errmsg:错误信息
回调函数的定义:
typedef int(*sqlite3_callback)(void *, int, char **, char **);
