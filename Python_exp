1. Python 中没有变量声明的过程，使用时直接初始化（声明+赋值），以为Python是以真实值为基准，而变量名是指向该值的指针。

2. 可更改(mutable)与不可更改(immutable)对象
1) 在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。
(1) 不可变类型：变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变a的值，相当于新生成了a。
(2) 可变类型：变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。
2) python 函数的参数传递：
(1) 不可变类型：类似 c++ 的值传递，如 整数、字符串、元组。如fun（a），传递的只是a的值，没有影响a对象本身。比如在 fun（a）内部修改 a 的值，只是修改另一个复制的对象，不会影响 a 本身。
(2) 可变类型：类似 c++ 的引用传递，如 列表，字典。如 fun（la），则是将 la 真正的传过去，修改后fun外部的la也会受影响
3) python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。

3. 什么是可变/不可变对象
1) 不可变对象，该对象所指向的内存中的值不能被改变。
当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。
2) 可变对象，该对象所指向的内存中的值可以被改变。
变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是原地改变。
3) Python中，数值类型（int和float）、字符串str、元组tuple都是不可变类型。而列表list、字典dict、集合set是可变类型。

4. 序列 & 字典
序列是以连续的整数为索引，如列表，元组。
字典以关键字为索引，关键字可以是任意不可变类型，通常用字符串或数值。
(1) 理解字典的最佳方式是把它看做无序的键=>值对集合。
(2) 在同一个字典之内，关键字必须是互不相同。
(3) 一对大括号创建一个空的字典：{}。

5. 参数组合
在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。
但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。

6. 
