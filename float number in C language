1. 正常可使用十进制表示任何数， 即以10为基数的多项式：…… x3*10^3 + x2*10^2 + x1*10^1 + x0*10^0 + y1*10^-1 + y2*10^-2 ……
2. 同样， 对于存储在计算机中的浮点数的整数部分， 其任意值都可由以2为基数的多项式表示：…… x3*2^3 + x2*2^2 + x1*2^1 + x0*2^0 ……
可以想象， x bit的二进制数， 共可表示（2^x）个状态， 而且数值可从0开始， 因而对应了（2^x）个自然数。
因此在一定范围内， 任何浮点数的整数部分的值都可由以2为基数的多项式表示。
3. 但对于浮点数的小数部分， 以2为基数的多项式，则未必都能准确表示：…… x0*2^-1 + x1*2^-2 + x3*2^-3 + x4*2^-4 ……



C语言中float,double类型,在内存中的结构(存储方式)


　　从存储结构和算法上来讲，double和float是一样的，不一样的地方仅仅是float是32位的，double是64位的，所以double能存储更高的精度。

　　任何数据在内存中都是以二进制（0或1）顺序存储的，每一个1或0被称为1位，而在x86CPU上一个字节是8位。比如一个16位（2 字节）的short int型变量的值是2^8(=256)，那么它的二进制表达就是：00000001 00000000。由于Intel CPU的架构原因，它是按字节倒 序存储的，那么就因该是这样：

　　00000000 00000011，这就是定点数256在内存中的结构。

目前C/C++编译器标准都遵照IEEE制定的浮点数表示法来进行float,double运算。

这种结构是一种科学计数法，用符号、指数和 尾数来表示，底数定为2——即把一个浮点数表示为尾数乘以2的指数次方再添上符号。

下面是具体的规格：

类型      符号位 阶码  尾数  长度 
float       1      8     23    32 
double    1     11    52    64 
临时数     1     15    64    80

由于通常C编译器默认浮点数是double型的，下面以double为例： 共计64位，折合8字节。

由最高到最低位分别是第63、62、61、……、0位： 最高位63位是符号位，1表示该数为负，0正； 62-52位，一共11位是指数位； 51-0位，一共52位是尾数位。

按照IEEE浮点数表示法，下面将把double型浮点数38414.4转换为十六进制代码。

把整数部和小数部分开处理:整数部直接化十六进制：960E。小数的处理: 0.4=0.5*0+0.25*1+0.125*1+0.0625*0+…… 实际上这永远算不完！这就是著名的浮点数精度问题。所以直到加上前面的整数部分算够53位就行了（隐藏位技术：最高位的1 不写入内存）。

如果你够耐心，手工算到53位那么因该是：38414.4(10)=1001011000001110.0110101010101010101010101010101010101(2)

科学记数法为：1.001……乘以2的15次方。指数为15！ 于是来看阶码，一共11位，可以表示范围是-1024 ~ 1023。因为指数可以为负，为了便于计算，规定都先加上1023，在这里， 15+1023=1038。

例子：十进制数：100 00001110

二进制表示：符号位：正数为 0 ！ 合在一起（尾数二进制最高位的1不要）：

01000000 11100010 11000001 11001101 01010101 01010101 01010101 01010101

十六进制表示：40 E2 C1 CD 55 55 55 55

按字节倒序存储的十六进制数就是： 55 55 55 55 CD C1 E2 40。

注意：倒序存储就是按字节倒序。
