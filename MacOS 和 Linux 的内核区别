有些人可能会认为 macOS 和 Linux 内核之间存在相似之处，因为它们可以处理类似的命令和类似的软件。有些人甚至认为苹果公司的 macOS 是基于 Linux 的。事实上是，两个内核有着截然不同的历史和特征。今天，我们来看看 macOS 和 Linux 的内核之间的区别。

macOS 内核的历史
我们将从 macOS 内核的历史开始。1985 年，由于与首席执行官 John Sculley 和董事会不和，史蒂夫·乔布斯Steve Jobs离开了苹果公司。然后，他成立了一家名为 NeXT 的新电脑公司。乔布斯希望将一款（带有新操作系统的）新计算机快速推向市场。为了节省时间，NeXT 团队使用了卡耐基梅隆大学的 Mach 内核 和部分 BSD 代码库来创建 NeXTSTEP 操作系统。

NeXT 从来没有取得过财务上的成功，部分归因于乔布斯花钱的习惯，就像他还在苹果公司一样。与此同时，苹果公司曾多次试图更新其操作系统，甚至与 IBM 合作，但从未成功。1997年，苹果公司以 4.29 亿美元收购了 NeXT。作为交易的一部分，史蒂夫·乔布斯回到了苹果公司，同时 NeXTSTEP 成为了 macOS 和 iOS 的基础。

Linux 内核的历史
与 macOS 内核不同，Linux 的创建并非源于商业尝试。相反，它是由芬兰计算机科学专业学生林纳斯·托瓦兹Linus Torvalds于 1991 年创建的。最初，内核是按照林纳斯自己的计算机的规格编写的，因为他想利用其新的 80386 处理器（的特性）。林纳斯于 1991 年 8 月在 Usenet 上发布了他的新内核代码。很快，他就收到了来自世界各地的代码和功能建议。次年，Orest Zborowski 将 X Window 系统移植到 Linux，使其能够支持图形用户界面。

在过去的 27 年中，Linux 已经慢慢成长并增加了不少功能。这不再是一个学生的小型项目。现在它运行在世界上大多数的计算设备和超级计算机上。不错！

macOS 内核的特性
macOS 内核被官方称为 XNU。这个首字母缩写词代表“XNU is Not Unix”。根据 苹果公司的 Github 页面，XNU 是“将卡耐基梅隆大学开发的 Mach 内核和 FreeBSD 组件整合而成的混合内核，加上用于编写驱动程序的 C++ API”。代码的 BSD 子系统部分“在微内核系统中通常实现为用户空间的服务”。Mach 部分负责底层工作，例如多任务、内存保护、虚拟内存管理、内核调试支持和控制台 I/O。

Linux 内核的特性
虽然 macOS 内核结合了微内核（Mach）和宏内核（BSD）的特性，但 Linux 只是一个宏内核。宏内核负责管理 CPU、内存、进程间通信、设备驱动程序、文件系统和系统服务调用（ LCTT 译注：原文为 system server calls，但结合 Linux 内核的构成，译者认为这里翻译成系统服务调用更合适，即 system service calls）。

用一句话总结 Linux 和 Mac 的区别
macOS 内核（XNU）比 Linux 历史更悠久，并且基于两个更古老一些的代码库的结合；另一方面，Linux 新一些，是从头开始编写的，并且在更多设备上使用。

macOS内核源码官方链接
https://opensource.apple.com/

内核概述（我觉得有意思的部分）
OS X：完整操作系统
内核：Darwin 包含 XNU (混合式内核，包含1. Mach微内核，2. BSD层建立在Mach之上，3. I/O kit). 有趣的是，XNU's Not Unix.
XNU给用户态主要提供BSD的接口，不仅有POSIX兼容的系统调用，也有BSD独有的调用。同时也提供少量Mach接口（竟然称之为API）
由于纯微内核只有学术价值，因此OS X使用的是混合内核。
XNU不是BSD的完整实现，比如BSD的brk()是缺失的；XNU的kext和BSD的kmod不兼容。
没有像Linux那样用户可见的文件系统procfs，但还是可以使用sysctl命令
I/O kit是C++实现的，但只用到C++的严格子集

开机流程，自行对比Linux
The kernel first initializes all the data structures needed to support Mach and BSD. Next, the kernel initializes the I/O Kit, which connects the kernel with the set of extensions that correspond to the machine’s hardware configuration. The kernel then finds and mounts the root filesystem. Finally, it launches the first process on the system, launchd, which is responsible for bootstrapping the system as well as launching daemons on behalf of the system or users.
（摘自《Mac OS X for UNIX Geek》一书）

和Linux软硬件对比的个人总结
EFI对应BIOS
NVRAM对应CMOS
boot.efi对应grub
launched对应init
kext对应ko

苹果开源地址在此：
https://opensource.apple.com/

GitHub地址在此：
https://github.com/apple/darwin-xnu
